INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}")

IF(COMMAND cmake_policy)
	CMAKE_POLICY(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

IF(MSVC)
	SET(getopt_src getopt.c)
ENDIF(MSVC)

SET(snowpack-app_sources
	Main.cc
	${getopt_src}
)

SET(SN_LINKS "snowpack")

FIND_PACKAGE(MeteoIO REQUIRED)
INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} ${METEOIO_INCLUDE_DIR})
LINK_DIRECTORIES(${METEOIO_LIBRARIES}) #this, so that if the users types in paths, it works
LIST(APPEND SN_LINKS ${METEOIO_LIBRARIES})

#special features # currently set in the main CMakeLists.txt
#SET(DEBUG_ARITHM ON CACHE BOOL "Force-crash the application when doing an arithmetic exception")

IF(PLUGIN_IMISIO)
	FIND_PACKAGE(OCCI REQUIRED)
	INCLUDE_DIRECTORIES(${OCCI_INCLUDE_DIR})
	LINK_DIRECTORIES(${OCCI_LIBRARIES})
	LIST(APPEND SN_LINKS ${OCCI_LIBRARIES})
ENDIF(PLUGIN_IMISIO)

INCLUDE("${CMAKE_MODULE_PATH}/BuildVersion.cmake")
BuildVersion()

#Prepare executable
SET(BINARY "snowpack.app")
ADD_EXECUTABLE(${BINARY} ${snowpack-app_sources})

IF(UNIX)
	LIST(APPEND SN_LINKS "dl")
	LIST(APPEND SN_LINKS "pthread")
ENDIF(UNIX)

TARGET_LINK_LIBRARIES(${BINARY} ${SN_LINKS})

SET_TARGET_PROPERTIES(${BINARY} PROPERTIES
	LIBRARY_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/lib"
	ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/lib"
	RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/bin"
	CLEAN_DIRECT_OUTPUT 1
	OUTPUT_NAME "snowpack"
)

INSTALL(TARGETS ${BINARY}
	RUNTIME DESTINATION bin
	LIBRARY DESTINATION lib
	ARCHIVE DESTINATION lib
	COMPONENT runtime
)
